# -*- coding: utf-8 -*-
"""
Created on Thu Dec  1 19:59:58 2022

@author: Deyaa.Elden
"""

import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    city=input('Enter city you want to see its results(chicago,new york city, washington\n\n):').lower()
    while city not in CITY_DATA.keys():
         print('Please Enter a valid City')
         city=input('Enter city you want to see its results(chicago,new york city, washington\n\n):').lower()
        # TO DO: get user input for month (all, january, february, ... , june)
    months= ['all', 'january', 'february', 'march', 'april', 'may', 'june']
    while True:
         month = input("Choose month:(all, january,february,march,april,may,june)").lower()
         if month in months:
             break
         else:
             print("Sorry we were not able to get the name of the month to filter data, Please input either 'all' to apply no month filter or january, february, ... , june.\n").lower()
             
 
    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    days = ['all', 'monday', 'tuesday', 'wednesday', 'friday', 'saturday', 'sunday']
    while True:
         day= input("Choose a day:(all, sunday,monday,tuesday,wednesday,friday,saturday)").lower()
         if day in days:
             break
         else:
             print("Sorry we were not able to get the name of the day")
             
    
    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])
    df['Start Time'] = pd.to_datetime(df['Start Time'])
    
    df['day_of_week'] = df['Start Time'].dt.day_name()
    df['month'] = df['Start Time'].dt.month
    df['hour'] = df['Start Time'].dt.hour
    
    if month != 'all':
        months=['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month) + 1
        df = df[df['month'] == month]
    
    if day != 'all':
        df = df[df['day_of_week'] == day.title()]


    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
   
    print("most common month of the year is {} : ".format(df['month'].mode()[0]))


    # TO DO: display the most common day of week
    
    print("most common day of the week is {} : ".format(df['day_of_week'].mode()[0]))


    # TO DO: display the most common start hour
    print("most common start hour is{} : ".format(df['hour'].mode()[0]))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    print("most common used start station is : {} ".format(df['Start Station'].mode()[0]))

    # TO DO: display most commonly used end station
    print("most common used end station is : {} " .format(df['End Station'].mode()[0]))


    # TO DO: display most frequent combination of start station and end station trip
    df['route']=df['Start Station']+','+df['End Station']
    print("most common used route is :{}".format(df['route'].mode()[0]))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    print('total travel time is : ',(df['Trip Duration'].sum()).round()) 


    # TO DO: display mean travel time
    print('mean travel time is ',(df['Trip Duration'].mean()))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df,city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print(df['User Type'].value_counts().to_frame())


    # TO DO: Display counts of gender
    if city != 'washington':
        print(df['Gender'].value_counts().to_frame())


    # TO DO: Display earliest, most recent, and most common year of birth
        print("the most earliest birth year is ",int(df['Birth Year'].min()))
        print("the most recent birth year is ",int(df['Birth Year'].max()))
        print("the most common birth year is ",int(df['Birth Year'].mode()[0]))
    else:
        print('There is no data for this city')
        


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)
    
def display_raw_data(df):
    view_data = input('\nWould you like to view 5 rows of individual trip data? Enter yes or no\n')
    if view_data.lower()=='yes':
        count=0
        while True:
            print(df.iloc[count:count+5])
            count+=5
            ask = input('Next 5 rows?')
            if ask.lower()!= 'yes':
                break
   
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)
        print(df)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df,city)
        display_raw_data(df)

        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()


